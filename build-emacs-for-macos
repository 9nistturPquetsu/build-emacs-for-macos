#!/usr/bin/env ruby
# frozen_string_literal: true

require 'date'
require 'fileutils'
require 'json'
require 'optparse'
require 'pathname'

#
# Config
#

DOWNLOAD_URL = 'https://github.com/emacs-mirror/emacs/tarball/%s'
LATEST_URL   = 'https://api.github.com/repos/emacs-mirror/emacs/commits?sha=%s'

ROOT_DIR    = File.expand_path(__dir__)
TARBALL_DIR = "#{ROOT_DIR}/tarballs"
SOURCES_DIR = "#{ROOT_DIR}/sources"
BUILDS_DIR  = "#{ROOT_DIR}/builds"

#
# Main
#

def main
  opts = parse_options

  ref  = ARGV.shift
  meta = get_ref_info(ref)

  if meta['sha'] && meta['date']
    tarball = download_tarball(meta['sha'])
    source  = extract_tarball(tarball, patches(opts))
    app     = compile_source(source, opts)
    internalize_libraries(app)

    archive_app(app, ref, meta['sha'], meta['date'])
  else
    raise "\nERROR: Failed to get commit info from GitHub API."
  end
end

#
# Patches
#

def patches(opts = {})
  p = []

  if opts[:xwidgets]
    p << {
      url: 'https://gist.github.com/fuxialexander/' \
           '0231e994fd27be6dd87db60339238813/raw/' \
           'b30c2d3294835f41e2c8afa1e63571531a38f3cf/0_all_webkit.patch'
    }
  end

  p
end

#
# Options
#

def parse_options
  options = {}

  OptionParser.new do |opts|
    opts.banner = <<~DOC
      Usage: ./build-emacs-for-macos [options] <branch/tag/sha>

      Branch, tag, and SHA are from the mirrors/emacs Github repo,
      available here: https://github.com/mirrors/emacs
    DOC

    opts.on('-j', '--parallel PROCS',
            'Compile in parallel using PROCS processes') do |v|
      options[:parallel] = v
    end

    opts.on('-x', '--xwidgets', 'Compile in parallel using PROCS processes') do
      options[:xwidgets] = true
    end
  end.parse!

  options
end

#
# Core Methods
#

def download_tarball(sha)
  FileUtils.mkdir_p(TARBALL_DIR)

  url = (DOWNLOAD_URL % sha)

  filename = "emacs-mirror-emacs-#{sha[0..6]}.tgz"
  target   = File.join(TARBALL_DIR, filename)

  if !File.exist?(target)
    puts "\nDownloading tarball from GitHub. This could take a while, " \
         'please be patient.'
    unless run_cmd("curl -L \"#{url}\" -o \"#{target}\"")
      raise "\nERROR: Download failed."
    end
  else
    puts "\nINFO: #{filename} already exists locally, attempting to use."
  end
  target
end

def extract_tarball(filename, patches = [])
  FileUtils.mkdir_p(SOURCES_DIR)

  dirname = File.basename(filename).gsub(/\.\w+$/, '')
  target = "#{SOURCES_DIR}/#{dirname}"

  if !File.exist?(target)
    puts "\nExtracting tarball..."
    unless run_cmd("tar -xzf \"#{filename}\" -C \"#{SOURCES_DIR}\"")
      raise "\nERROR: Tarball extraction failed."
    end

    patches.each do |patch|
      apply_patch(patch, target)
    end
  else
    puts "\nINFO: #{dirname} source tree exists, attempting to use."
  end
  target
end

def compile_source(source, opts)
  target = "#{source}/nextstep"

  if !File.exist?("#{target}/Emacs.app")
    puts "\nCompiling from source. This will take a while..."

    v = get_macos_version
    ver = "#{v[:major]}.#{v[:minor]}"
    brew_dir = `brew --prefix`.chomp

    ENV['CC'] = 'cc'
    ENV['PKG_CONFIG_PATH'] = [
      "#{brew_dir}/lib/pkgconfig",
      "#{brew_dir}/share/pkgconfig",
      "#{brew_dir}/opt/expat/lib/pkgconfig",
      "#{brew_dir}/opt/libxml2/lib/pkgconfig",
      "#{brew_dir}/opt/ncurses/lib/pkgconfig",
      "#{brew_dir}/opt/zlib/lib/pkgconfig",
      "#{brew_dir}/Homebrew/Library/Homebrew/os/mac/pkgconfig/#{ver}",
      ENV['PKG_CONFIG_PATH']
    ].compact.join(':')

    ENV['PATH'] = [
      "#{brew_dir}/bin",
      "#{brew_dir}/opt/texinfo/bin",
      ENV['PATH']
    ].compact.join(':')

    configure_flags = [
      '--with-ns',
      '--with-modules',
      '--enable-locallisppath=' \
      '/Library/Application Support/Emacs/${version}/site-lisp:' \
      '/Library/Application Support/Emacs/site-lisp'
    ]
    configure_flags << '--with-xwidgets' if opts[:xwidgets]

    parallel_flags = opts[:parallel] ? ['-j', opts[:parallel]] : []

    FileUtils.cd(source) do
      if File.exist?('autogen/copy_autogen')
        run_cmd 'autogen/copy_autogen'
      elsif File.exist?('autogen.sh')
        run_cmd './autogen.sh'
      end

      run_cmd './configure', *configure_flags

      # Disable aligned_alloc on Mojave and below. See issue:
      # https://github.com/daviderestivo/homebrew-emacs-head/issues/15
      if v[:major] <= 10 && v[:minor] <= 14
        puts 'Force disabling of aligned_alloc on macOS <= Mojave (10.14.x)'
        disable_alligned_alloc
      end

      run_cmd 'make', *parallel_flags
      run_cmd 'make', 'install'
    end

    raise "\nERROR: Build failed." unless File.exist?("#{target}/Emacs.app")
  else
    puts "\nINFO: Emacs.app already exists in " \
         "\"#{target.gsub(ROOT_DIR + '/', '')}\", attempting to use."
  end
  "#{target}/Emacs.app"
end

def internalize_libraries(app)
  raise "\nERROR: #{app} does not exist" unless File.exist?(app)

  puts "\nEmbedding libraries into Emacs.app"

  v = get_macos_version
  brew_dir = `brew --prefix`.chomp
  lib_dir = "lib-x86_64-#{[v[:major], v[:minor]].join('_')}"

  extra_libs = [
    "#{brew_dir}/opt/expat/lib/libexpat.1.dylib",
    "#{brew_dir}/opt/libiconv/lib/libiconv.2.dylib",
    "#{brew_dir}/opt/zlib/lib/libz.1.dylib"
  ]

  FileUtils.cd(File.dirname(app)) do
    copy_libs(
      "#{app}/Contents/MacOS/Emacs",
      brew_dir,
      "#{app}/Contents/MacOS/#{lib_dir}"
    )

    copy_extra_libs(
      extra_libs,
      "#{app}/Contents/MacOS/Emacs",
      brew_dir,
      "#{app}/Contents/MacOS/#{lib_dir}"
    )

    self_ref_libs(
      "#{app}/Contents/MacOS/Emacs",
      "#{app}/Contents/MacOS/#{lib_dir}"
    )
  end
end

def archive_app(app, ref, sha, date)
  FileUtils.mkdir_p(BUILDS_DIR)

  v = get_macos_version
  metadata = [ref, date, sha[0..6], "macOS-#{v[:major]}.#{v[:minor]}"]

  filename = "Emacs.app-[#{metadata.join('][')}].tbz"
  target   = "#{BUILDS_DIR}/#{filename}"

  app_base = File.basename(app)
  app_dir  = File.dirname(app)

  if !File.exist?(target)
    puts "\nCreating #{filename} archive in \"#{BUILDS_DIR}\"..."
    FileUtils.cd(app_dir) { system('tar', '-cjf', target, app_base) }
  else

    puts "\nINFO: #{filename} archive exists in " \
         "#{BUILDS_DIR.gsub(ROOT_DIR + '/', '')}, skipping archving."
  end
end

#
# Helper Methods
#

def run_cmd(*args)
  puts '==> ' + args.join(' ')
  system(*args)
end

def copy_libs(exe, brew_dir, lib_dir, rel_path = nil)
  exe_file = File.basename(exe)
  rel_path ||= Pathname.new(lib_dir).relative_path_from(File.dirname(exe)).to_s

  `otool -L "#{exe}"`.split("\n")[1..-1].each do |line|
    match = line.match(%r{^\s+(.+/(lib[^/ ]+))\s})
    next unless match && match[1].start_with?(brew_dir)

    while_writable(exe) do
      if match[2] == exe_file
        system('install_name_tool', '-id',
               "@executable_path/#{rel_path}/#{match[2]}", exe)
      else
        system('install_name_tool', '-change', match[1],
               "@executable_path/#{rel_path}/#{match[2]}", exe)
      end
    end

    next if match[2] == exe_file || File.exist?("#{lib_dir}/#{match[2]}")

    FileUtils.mkdir_p(lib_dir)
    FileUtils.cp(match[1], lib_dir)
    copy_libs("#{lib_dir}/#{match[2]}", brew_dir, lib_dir, rel_path)
  end
end

def copy_extra_libs(extra_libs, exe, brew_dir, lib_dir, rel_path = nil)
  rel_path ||= Pathname.new(lib_dir).relative_path_from(File.dirname(exe)).to_s

  extra_libs.each do |lib|
    lib_file = File.basename(lib)
    target = "#{lib_dir}/#{lib_file}"
    unless File.exist?(target)
      FileUtils.mkdir_p(lib_dir)
      FileUtils.cp(lib, lib_dir)
    end

    while_writable(target) do
      system('install_name_tool', '-id',
             "@executable_path/#{rel_path}/#{lib_file}", target)
    end

    copy_libs(target, brew_dir, lib_dir, rel_path)
  end
end

def self_ref_libs(exe, lib_dir)
  rel_path = Pathname.new(lib_dir).relative_path_from(File.dirname(exe)).to_s
  lib_paths ||= Dir.glob("#{lib_dir}/*")
  libs = lib_paths.map { |f| File.basename(f) }

  ([exe] + lib_paths).each do |bin_path|
    `otool -L "#{bin_path}"`.split("\n")[1..-1].each do |line|
      match = line.match(%r{^\s+(.+/(lib[^/ ]+))\s})
      next unless match
      next if match[1].start_with?('@executable_path/')
      next unless libs.include?(match[2])

      while_writable(bin_path) do
        system('install_name_tool', '-change', match[1],
               "@executable_path/#{rel_path}/#{match[2]}",
               bin_path)
      end
    end
  end
end

def while_writable(file)
  mode = File.stat(file).mode
  File.chmod(0o775, file)
  yield
  File.chmod(mode, file)
end

def get_macos_version
  v = `sw_vers -productVersion`.chomp
                               .sub(/^(\d+\.\d+\.\d)+/, '\1')
                               .split('.')
                               .map(&:to_i)

  { major: v[0], minor: v[1], patch: v[2] }
end

def disable_alligned_alloc
  filename = 'src/config.h'
  content = File.read(filename)
                .gsub('#define HAVE_ALIGNED_ALLOC 1',
                      '#undef HAVE_ALIGNED_ALLOC')
                .gsub('#define HAVE_DECL_ALIGNED_ALLOC 1',
                      '#undef HAVE_DECL_ALIGNED_ALLOC')
                .gsub('#define HAVE_ALLOCA 1',
                      '#undef HAVE_ALLOCA')
                .gsub('#define HAVE_ALLOCA_H 1',
                      '#undef HAVE_ALLOCA_H')

  File.open(filename, 'w') { |f| f.write(content) }
end

def get_ref_info(ref = 'master')
  response = `curl "#{LATEST_URL % ref}" 2>/dev/null`
  meta = JSON.parse(response).first
  {
    'sha' => meta['sha'],
    'date' => Date.parse(meta['commit']['committer']['date'])
  }
end

def apply_patch(patch, target)
  raise "ERROR: \"#{target}\" does not exist." unless File.exist?(target)

  if patch[:url]
    system "mkdir -p \"#{target}/patches\""

    patch_file = "#{target}/patches/patch-{num}.diff"
    num = 1
    num += 1 while File.exist?(patch_file.gsub('{num}', num.to_s.rjust(3, '0')))
    patch_file = patch_file.gsub('{num}', num.to_s.rjust(3, '0'))

    puts "Downloading patch: #{patch[:url]}"
    system "curl -L# \"#{patch[:url]}\" -o \"#{patch_file}\""

    puts 'Applying patch...'
    system "cd \"#{target}\" && patch -f -p1 -i \"#{patch_file}\""
  elsif patch[:replace]
    raise 'ERROR: Patch replace input error' unless patch[:replace].size == 3

    file, before, after = patch[:replace]
    filepath = File.join(target, file)

    unless File.exist?(filepath)
      raise "ERROR: \"#{file}\" does not exist in #{target}"
    end

    f = File.open(filepath, 'rb')
    s = f.read
    sub = s.gsub!(before, after)
    raise "ERROR: Replacement filed in #{file}" if sub.nil?

    f.reopen(filepath, 'wb').write(s)
    f.close
  end
end

#
# Run it!
#

main
